name: Daily Code Report
on:
  schedule:
    - cron: '0 16 * * *'  # 每天北京时间 00:00 运行（UTC时间16:00）
  workflow_dispatch:     # 允许手动触发
    inputs:
      days_to_cover:
        description: 'days to cover (for manual trigger)'
        required: false
        default: '1'
permissions:
  contents: write  # 需要写权限来提交文件
  issues: write
jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录以便比较差异
          token: ${{ secrets.GITHUB_TOKEN }}  # 确保使用正确的token
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil
      
      - name: Generate daily report
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_MANUAL_TRIGGER: ${{ github.event_name == 'workflow_dispatch' }}
          DAYS_TO_COVER: ${{ inputs.days_to_cover || 1 }}
          ADDITIONAL_REPOS: ${{ secrets.ADDITIONAL_REPOS }}
          TZ: 'Asia/Shanghai'  # 设置时区为中国时间
        run: |
          python generate_log.py
      
      - name: Check generated files
        run: |
          echo "Checking generated files..."
          if [ -d "logs" ]; then
            find logs -name "*.md" -type f
            echo "Files found:"
            ls -la logs/*/
          else
            echo "No logs directory found"
          fi
          
          # 检查README.md是否存在和被修改
          if [ -f "README.md" ]; then
            echo "README.md exists"
            echo "README.md content preview:"
            head -20 README.md
          else
            echo "README.md not found"
          fi
      
      - name: Commit and push reports
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 检查是否有文件需要处理
          if [ -d "logs" ] || [ -f "README.md" ]; then
            echo "Checking for changes..."
            
            # 显示当前状态
            git status --porcelain
            
            # 如果有未跟踪或修改的文件，先暂存它们
            if [ -n "$(git status --porcelain)" ]; then
              echo "Stashing any uncommitted changes temporarily..."
              git stash push -u -m "Temporary stash for pull"
              
              # 拉取远程更改
              echo "Pulling latest changes..."
              git pull origin main --rebase
              
              # 恢复暂存的更改
              echo "Restoring stashed changes..."
              if git stash list | grep -q "Temporary stash for pull"; then
                git stash pop
              fi
              
              # 添加所有变更的文件
              echo "Adding changes..."
              git add logs/ README.md
              
              # 检查是否真正有变更需要提交
              if git diff --staged --quiet; then
                echo "No changes to commit after merge"
              else
                echo "Changes detected, committing..."
                git status --porcelain
                git commit -m "Add daily code reports and update README for $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S CST')"
                
                # 推送更改
                echo "Pushing changes..."
                max_retries=3
                retry_count=0
                
                while [ $retry_count -lt $max_retries ]; do
                  if git push origin main; then
                    echo "Reports and README committed and pushed successfully"
                    break
                  else
                    echo "Push failed, attempt $((retry_count + 1))/$max_retries"
                    retry_count=$((retry_count + 1))
                    
                    if [ $retry_count -lt $max_retries ]; then
                      echo "Pulling latest changes and retrying..."
                      git pull origin main --rebase
                    else
                      echo "Max retries reached, push failed"
                      exit 1
                    fi
                  fi
                done
              fi
            else
              echo "No changes detected"
            fi
          else
            echo "No files to process"
          fi
